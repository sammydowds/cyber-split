// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TextNotifications {
  id        String   @id @default(cuid())
  type      String
  phone     String   @unique @db.VarChar(255)
  enabled   Boolean  @default(false)
  time      DateTime @db.Timestamptz(0)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model Profile {
  id                       String              @id @default(cuid())
  email                    String              @unique
  firstName                String?
  stripeCustomerId         String?             @unique
  stripeSubscriptionStatus String?
  workoutsPerWeekGoal      Int                 @default(3)
  verifiedAuthor           Boolean             @default(false)
  preferredUnits           String              @default("IMPERIAL")
  tier                     String              @default("IGNITE")
  nextTier                 String              @default("SILVER")
  multiplier               String              @default("SINGLE")
  nextMultiplier           String              @default("SINGLE")
  preferredEquipment       Equipment[]
  workoutsUntilNextTier    Int                 @default(10)
  totalWorkouts            Int                 @default(0)
  timezoneId               String?
  TemplateWorkout          TemplateWorkout[]
  LoggedWorkout            LoggedWorkout[]
  Split                    Split[]
  TextNotifications        TextNotifications[]
  ActiveSplit              ActiveSplit[]

  @@index([email], name: "idx_profile_email")
}

model Equipment {
  id        String     @id @default(cuid())
  name      String
  mediaUrl  String?
  exercises Exercise[]
  Profile   Profile[]
  profileId String?
}

model Exercise {
  id                 String      @id @default(cuid())
  name               String
  bodyPart           String?
  exRxLink           String?
  mode               String?
  type               String?
  target             String?
  classification     String?
  synergists         String[]
  stabilizers        String[]
  dynamicStabilizers String[]
  instructions       String[]
  tips               String[]
  mediaUrl           String?
  equipment          Equipment[]
  Set                Set[]
}

model Set {
  id              String         @id @default(cuid())
  created         DateTime       @default(now())
  exerciseId      String
  exercise        Exercise       @relation(fields: [exerciseId], references: [id])
  reps            Int?
  interval        Int?
  duration        Int?
  distance        Int?
  restPeriod      Int?
  weight          Int?
  isInterval      Boolean?
  dateLogged      DateTime?
  StrengthGroup   StrengthGroup? @relation(fields: [strengthGroupId], references: [id], onDelete: Cascade)
  strengthGroupId String?
}

model StrengthGroup {
  id                String           @id @default(cuid())
  name              String
  sets              Set[]
  TemplateWorkout   TemplateWorkout? @relation(fields: [templateWorkoutId], references: [id], onDelete: Cascade)
  templateWorkoutId String?
  LoggedWorkout     LoggedWorkout?   @relation(fields: [loggedWorkoutId], references: [id], onDelete: Cascade)
  loggedWorkoutId   String?
}

model TemplateWorkout {
  id             String          @id @default(cuid())
  letterLabel    String
  name           String
  created        DateTime        @default(now())
  updated        DateTime?
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  units          String
  strengthGroups StrengthGroup[]
  Split          Split?          @relation(fields: [splitId], references: [id], onDelete: Cascade)
  splitId        String?
  LoggedWorkout  LoggedWorkout[]
}

model LoggedWorkout {
  id                String           @id @default(cuid())
  name              String
  letterLabel       String
  created           DateTime         @default(now())
  updated           DateTime?
  profileId         String
  profile           Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  units             String
  dateLogged        DateTime?
  strengthGroups    StrengthGroup[]
  Split             Split?           @relation(fields: [splitId], references: [id])
  splitId           String?
  templateWorkoutId String?
  templateWorkout   TemplateWorkout? @relation(fields: [templateWorkoutId], references: [id])
}

model Split {
  id             String            @id @default(uuid())
  created        DateTime          @default(now())
  active         Boolean           @default(false)
  cadence        String
  name           String?
  type           String
  skipDays       Int[]
  rating         Int?
  profileId      String
  profile        Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  workouts       TemplateWorkout[]
  loggedWorkouts LoggedWorkout[]
  ActiveSplit    ActiveSplit[]
}

model ActiveSplit {
  id        String   @id @default(uuid())
  start     DateTime
  end       DateTime
  schedule  Json?
  notes     String?
  splitId   String
  split     Split    @relation(fields: [splitId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
